const { QuickDB } = require('quick.db');
const db = new QuickDB({ filePath: './bot-data.sqlite' });

// Shutdown ‡¶π‡ßÅ‡¶ï
if (!process._statusHookRegistered) {
  process._statusHookRegistered = true;
  const saveShutdownTime = async () => {
    await db.set('lastShutdown', Date.now());
    process.exit();
  };
  process.on("SIGINT", saveShutdownTime);
  process.on("SIGTERM", saveShutdownTime);
}

module.exports = {
  // ‚Ä¶config‚Ä¶
  onStart: async function({ message }) {
    const now = Date.now();

    // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∂‡¶æ‡¶ü‡¶°‡¶æ‡¶â‡¶®
    let offlineText = "No previous shutdown info";
    const last = await db.get('lastShutdown');
    if (last) {
      const diff = Math.floor((now - last) / 1000);
      // ‚Ä¶‡¶¶‡¶ø‡¶®/‡¶ò‡¶®‡ßç‡¶ü‡¶æ/‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü/‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‚Ä¶
      offlineText = `Last offline: ${d}d ${h}h ${m}m ${s}s ago`;
    }

    // uptime
    const uptimeSec = Math.floor(process.uptime());
    // ‚Ä¶‡¶â‡¶™‡¶∞‡ßá ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶ï‡¶∞‡ßá ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡ßá‡¶õ‚Ä¶

    return message.reply(
      `üîµ Uptime: moronali-bot\n` +
      `________________________\n` +
      `Last offline: ${offlineText}\n` +
      // ‚Ä¶uptime details‚Ä¶
      `________________________`
    );
  }
};
